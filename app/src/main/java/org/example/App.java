/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import io.activej.http.AsyncServlet;
import io.activej.http.HttpResponse;
import io.activej.inject.annotation.Provides;
import io.activej.launchers.http.MultithreadedHttpServerLauncher;
import io.activej.worker.annotation.Worker;
import io.activej.worker.annotation.WorkerId;
import org.eclipse.jetty.server.*;
import org.eclipse.jetty.util.Callback;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import spark.Spark;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class App {

    public static final class HttpHelloWorldExample extends MultithreadedHttpServerLauncher {

        @Provides
        @Worker
        AsyncServlet servlet ( @WorkerId int workerId){
            return request -> HttpResponse.ok200()
                    .withPlainText("Hello World")
                    .toPromise();
        }

        public static void run (String[]args) throws Exception {
            HttpHelloWorldExample example = new HttpHelloWorldExample();
            example.launch(args);
        }
    }

    public static final class Spark11{
        public static void run(String[] args){
            Spark.port(8080);
            Spark.useVirtualThread(true);
            Spark.get( "/", (req,resp) -> "Hello World");
        }
    }

    public static final class Jetty12{

        public static void run(String[] args) throws Exception {
            QueuedThreadPool threadPool = new QueuedThreadPool();
            threadPool.setName("server");
            // Create a Server instance.
            Server server = new Server(threadPool);
            // Create a ServerConnector to accept connections from clients.
            Connector connector = new ServerConnector(server);
            ((ServerConnector)connector).setPort(8080);
            // Add the Connector to the Server
            server.addConnector(connector);

            // Set a simple Handler to handle requests/responses.
            server.setHandler(new Handler.Abstract()
            {
                @Override
                public boolean handle(Request request, Response response, Callback callback)
                {
                    final ByteBuffer resp = ByteBuffer.wrap( "Hello World".getBytes(StandardCharsets.UTF_8));
                    response.write(true, resp,  Callback.NOOP );
                    // Succeed the callback to signal that the
                    // request/response processing is complete.
                    callback.succeeded();
                    return true;
                }
            });

            server.start();
        }
    }

    public static void main(String[] args) throws Exception {
        if ( args.length == 0 ){
            System.err.println("Use 'a' to use activej or anything else for spark");
            System.exit(0);
        }
        switch (args[0]){
            case "a" :
                System.out.println("Running Activej");
                HttpHelloWorldExample.run(args);
                break;

            case "s" :
                System.out.println("Running Spark11");
                Spark11.run(args);
                break;
            case "j" :
                System.out.println("Running Raw Jetty12");
                Jetty12.run(args);
                break;
        }
    }
}
